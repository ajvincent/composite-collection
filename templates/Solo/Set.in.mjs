/**
 * @param {Map}            defines The preprocessor macros.
 * @param {JSDocGenerator} docs    The primary documentation generator.
 * @returns {string}               The generated source code.
 */
const preprocess = function preprocess(defines, docs) {
    let invokeValidate = "";
    if (defines.invokeValidate) {
        invokeValidate = `\n    this.#requireValidKey(${defines.argList});\n`;
    }
    return `
${defines.importLines}

class ${defines.className} extends ${defines.weakSetElements.length ? "Weak" : ""}Set {
${defines.invokeValidate ? `
${docs.buildBlock("add", 2)}
  add(${defines.argList}) {${invokeValidate}
    return super.add(${defines.argList});
  }
` : ``}

${defines.validateArguments ? `
${docs.buildBlock("isValidKeyPublic", 2)}
  isValidKey(${defines.argList}) {
    return this.#isValidKey(${defines.argList});
  }
` : ``}

${defines.invokeValidate ?
        `
${docs.buildBlock("requireValidKey", 2)}
  #requireValidKey(${defines.argList}) {
    if (!this.#isValidKey(${defines.argList}))
      throw new Error("The ordered key set is not valid!");
  }

${docs.buildBlock("isValidKeyPrivate", 2)}
  #isValidKey(${defines.argList}) {
${defines.validateArguments}
    return true;
  }

` : ``}

  [Symbol.toStringTag] = "${defines.className}";
}

Object.freeze(${defines.className});
Object.freeze(${defines.className}.prototype);
`;
};
export default preprocess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0LmluLm1qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNldC5pbi5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxHQUFxQixTQUFTLFVBQVUsQ0FBQyxPQUF3QixFQUFFLElBQW9CO0lBQ3JHLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUN4QixJQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUU7UUFDMUIsY0FBYyxHQUFHLCtCQUErQixPQUFPLENBQUMsT0FBTyxNQUFNLENBQUM7S0FDdkU7SUFFRCxPQUFPO0VBQ1AsT0FBTyxDQUFDLFdBQVc7O1FBRWIsT0FBTyxDQUFDLFNBQVMsWUFBWSxPQUFPLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO0VBQy9FLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0VBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNuQixPQUFPLENBQUMsT0FBTyxNQUFNLGNBQWM7dUJBQ3BCLE9BQU8sQ0FBQyxPQUFPOztDQUVyQyxDQUFDLENBQUMsQ0FBQyxFQUFFOztFQUVKLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7RUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7ZUFDekIsT0FBTyxDQUFDLE9BQU87OEJBQ0EsT0FBTyxDQUFDLE9BQU87O0NBRTVDLENBQUMsQ0FBQyxDQUFDLEVBQUU7O0VBRUosT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hCO0VBQ0EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7cUJBQ2xCLE9BQU8sQ0FBQyxPQUFPOzRCQUNSLE9BQU8sQ0FBQyxPQUFPOzs7O0VBSXpDLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO2dCQUN6QixPQUFPLENBQUMsT0FBTztFQUM3QixPQUFPLENBQUMsaUJBQWlCOzs7O0NBSTFCLENBQUMsQ0FBQyxDQUFDLEVBQUU7OzRCQUVzQixPQUFPLENBQUMsU0FBUzs7O2dCQUc3QixPQUFPLENBQUMsU0FBUztnQkFDakIsT0FBTyxDQUFDLFNBQVM7Q0FDaEMsQ0FBQztBQUNGLENBQUMsQ0FBQTtBQUVELGVBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFkb25seURlZmluZXMsIEpTRG9jR2VuZXJhdG9yLCBUZW1wbGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIi4uL3NoYXJlZFR5cGVzLm1qc1wiO1xuXG4vKipcbiAqIEBwYXJhbSB7TWFwfSAgICAgICAgICAgIGRlZmluZXMgVGhlIHByZXByb2Nlc3NvciBtYWNyb3MuXG4gKiBAcGFyYW0ge0pTRG9jR2VuZXJhdG9yfSBkb2NzICAgIFRoZSBwcmltYXJ5IGRvY3VtZW50YXRpb24gZ2VuZXJhdG9yLlxuICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgICBUaGUgZ2VuZXJhdGVkIHNvdXJjZSBjb2RlLlxuICovXG5jb25zdCBwcmVwcm9jZXNzOiBUZW1wbGF0ZUZ1bmN0aW9uID0gZnVuY3Rpb24gcHJlcHJvY2VzcyhkZWZpbmVzOiBSZWFkb25seURlZmluZXMsIGRvY3M6IEpTRG9jR2VuZXJhdG9yKSB7XG4gIGxldCBpbnZva2VWYWxpZGF0ZSA9IFwiXCI7XG4gIGlmIChkZWZpbmVzLmludm9rZVZhbGlkYXRlKSB7XG4gICAgaW52b2tlVmFsaWRhdGUgPSBgXFxuICAgIHRoaXMuI3JlcXVpcmVWYWxpZEtleSgke2RlZmluZXMuYXJnTGlzdH0pO1xcbmA7XG4gIH1cblxuICByZXR1cm4gYFxuJHtkZWZpbmVzLmltcG9ydExpbmVzfVxuXG5jbGFzcyAke2RlZmluZXMuY2xhc3NOYW1lfSBleHRlbmRzICR7ZGVmaW5lcy53ZWFrU2V0RWxlbWVudHMubGVuZ3RoID8gXCJXZWFrXCIgOiBcIlwifVNldCB7XG4ke2RlZmluZXMuaW52b2tlVmFsaWRhdGUgPyBgXG4ke2RvY3MuYnVpbGRCbG9jayhcImFkZFwiLCAyKX1cbiAgYWRkKCR7ZGVmaW5lcy5hcmdMaXN0fSkgeyR7aW52b2tlVmFsaWRhdGV9XG4gICAgcmV0dXJuIHN1cGVyLmFkZCgke2RlZmluZXMuYXJnTGlzdH0pO1xuICB9XG5gIDogYGB9XG5cbiR7ZGVmaW5lcy52YWxpZGF0ZUFyZ3VtZW50cyA/IGBcbiR7ZG9jcy5idWlsZEJsb2NrKFwiaXNWYWxpZEtleVB1YmxpY1wiLCAyKX1cbiAgaXNWYWxpZEtleSgke2RlZmluZXMuYXJnTGlzdH0pIHtcbiAgICByZXR1cm4gdGhpcy4jaXNWYWxpZEtleSgke2RlZmluZXMuYXJnTGlzdH0pO1xuICB9XG5gIDogYGB9XG5cbiR7ZGVmaW5lcy5pbnZva2VWYWxpZGF0ZSA/XG4gIGBcbiR7ZG9jcy5idWlsZEJsb2NrKFwicmVxdWlyZVZhbGlkS2V5XCIsIDIpfVxuICAjcmVxdWlyZVZhbGlkS2V5KCR7ZGVmaW5lcy5hcmdMaXN0fSkge1xuICAgIGlmICghdGhpcy4jaXNWYWxpZEtleSgke2RlZmluZXMuYXJnTGlzdH0pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG9yZGVyZWQga2V5IHNldCBpcyBub3QgdmFsaWQhXCIpO1xuICB9XG5cbiR7ZG9jcy5idWlsZEJsb2NrKFwiaXNWYWxpZEtleVByaXZhdGVcIiwgMil9XG4gICNpc1ZhbGlkS2V5KCR7ZGVmaW5lcy5hcmdMaXN0fSkge1xuJHtkZWZpbmVzLnZhbGlkYXRlQXJndW1lbnRzfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbmAgOiBgYH1cblxuICBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9IFwiJHtkZWZpbmVzLmNsYXNzTmFtZX1cIjtcbn1cblxuT2JqZWN0LmZyZWV6ZSgke2RlZmluZXMuY2xhc3NOYW1lfSk7XG5PYmplY3QuZnJlZXplKCR7ZGVmaW5lcy5jbGFzc05hbWV9LnByb3RvdHlwZSk7XG5gO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwcmVwcm9jZXNzO1xuIl19