/**
 * @param {Map}            defines The preprocessor macros.
 * @param {JSDocGenerator} docs    The primary documentation generator.
 * @returns {string}               The generated source code.
 */
const preprocess = function preprocess(defines, docs) {
    let invokeValidate = "";
    if (defines.has("invokeValidate")) {
        invokeValidate = `\n    this.#requireValidKey(${defines.get("argList")});\n`;
    }
    return `
${defines.get("importLines")}

class ${defines.get("className")} extends ${defines.get("weakMapCount") ? "Weak" : ""}Map {
${defines.has("invokeValidate") ? `
  delete(${defines.get("argList")}) {${invokeValidate}
    return super.delete(${defines.get("argList")});
  }

  get(${defines.get("argList")}) {${invokeValidate}
    return super.get(${defines.get("argList")});
  }

  has(${defines.get("argList")}) {${invokeValidate}
    return super.has(${defines.get("argList")});
  }
` : ``}

${defines.has("validateArguments") ? `
${docs.buildBlock("isValidKeyPublic", 2)}
  isValidKey(${defines.get("argList")}) {
    return this.#isValidKey(${defines.get("argList")});
  }

${defines.has("validateValue") ? `
${docs.buildBlock("isValidValuePublic", 2)}
  isValidValue(value) {
    return this.#isValidValue(value);
  }
  ` : ``}

` : ``}

${defines.has("invokeValidate") ? `
${docs.buildBlock("set", 2)}
  set(${defines.get("argList")}, value) {${invokeValidate}
  ${defines.has("validateValue") ? `
    if (!this.#isValidValue(value))
      throw new Error("The value is not valid!");
  ` : ``}
    return super.set(${defines.get("argList")}, value);
  }
` : ``}

${defines.has("validateArguments") ? `
${docs.buildBlock("requireValidKey", 2)}
  #requireValidKey(${defines.get("argList")}) {
    if (!this.#isValidKey(${defines.get("argList")}))
      throw new Error("The ordered key set is not valid!");
  }

${docs.buildBlock("isValidKeyPrivate", 2)}
  #isValidKey(${defines.get("argList")}) {
${defines.get("validateArguments")}
    return true;
  }
` : ``}
${defines.has("validateValue") ? `
${docs.buildBlock("isValidValuePrivate", 2)}
  #isValidValue(value) {
    ${defines.get("validateValue")}
    return true;
  }
  ` : ``}

  [Symbol.toStringTag] = "${defines.get("className")}";
}

Object.freeze(${defines.get("className")});
Object.freeze(${defines.get("className")}.prototype);
`;
};
export default preprocess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwLmluLm1qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1hcC5pbi5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxHQUFxQixTQUFTLFVBQVUsQ0FBQyxPQUE0QixFQUFFLElBQW9CO0lBQ3pHLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUN4QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUNqQyxjQUFjLEdBQUcsK0JBQStCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztLQUM5RTtJQUVELE9BQU87RUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQzs7UUFFcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7RUFDbkYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLGNBQWM7MEJBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDOzs7UUFHeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxjQUFjO3VCQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7O1FBR3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sY0FBYzt1QkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7O0NBRTVDLENBQUMsQ0FBQyxDQUFDLEVBQUU7O0VBRUosT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuQyxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztlQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs4QkFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7O0VBSWxELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDOzs7O0dBSXZDLENBQUMsQ0FBQyxDQUFDLEVBQ0o7O0NBRUQsQ0FBQyxDQUFDLENBQUMsRUFBRTs7RUFFSixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLGNBQWM7SUFFckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7OztHQUdoQyxDQUFDLENBQUMsQ0FBQyxFQUNKO3VCQUNxQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7Q0FFNUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7RUFFSixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO3FCQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs0QkFDZixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7OztFQUloRCxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztnQkFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7RUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQzs7O0NBR2pDLENBQUMsQ0FBQyxDQUFDLEVBQUU7RUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQzs7TUFFckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7OztHQUcvQixDQUFDLENBQUMsQ0FBQyxFQUFFOzs0QkFFb0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7OztnQkFHcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0NBQ3ZDLENBQUM7QUFDRixDQUFDLENBQUE7QUFFRCxlQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUHJlcHJvY2Vzc29yRGVmaW5lcywgSlNEb2NHZW5lcmF0b3IsIFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiLi4vc2hhcmVkVHlwZXMubWpzXCI7XG5cbi8qKlxuICogQHBhcmFtIHtNYXB9ICAgICAgICAgICAgZGVmaW5lcyBUaGUgcHJlcHJvY2Vzc29yIG1hY3Jvcy5cbiAqIEBwYXJhbSB7SlNEb2NHZW5lcmF0b3J9IGRvY3MgICAgVGhlIHByaW1hcnkgZG9jdW1lbnRhdGlvbiBnZW5lcmF0b3IuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgIFRoZSBnZW5lcmF0ZWQgc291cmNlIGNvZGUuXG4gKi9cbmNvbnN0IHByZXByb2Nlc3M6IFRlbXBsYXRlRnVuY3Rpb24gPSBmdW5jdGlvbiBwcmVwcm9jZXNzKGRlZmluZXM6IFByZXByb2Nlc3NvckRlZmluZXMsIGRvY3M6IEpTRG9jR2VuZXJhdG9yKSB7XG4gIGxldCBpbnZva2VWYWxpZGF0ZSA9IFwiXCI7XG4gIGlmIChkZWZpbmVzLmhhcyhcImludm9rZVZhbGlkYXRlXCIpKSB7XG4gICAgaW52b2tlVmFsaWRhdGUgPSBgXFxuICAgIHRoaXMuI3JlcXVpcmVWYWxpZEtleSgke2RlZmluZXMuZ2V0KFwiYXJnTGlzdFwiKX0pO1xcbmA7XG4gIH1cblxuICByZXR1cm4gYFxuJHtkZWZpbmVzLmdldChcImltcG9ydExpbmVzXCIpfVxuXG5jbGFzcyAke2RlZmluZXMuZ2V0KFwiY2xhc3NOYW1lXCIpfSBleHRlbmRzICR7ZGVmaW5lcy5nZXQoXCJ3ZWFrTWFwQ291bnRcIikgPyBcIldlYWtcIiA6IFwiXCJ9TWFwIHtcbiR7ZGVmaW5lcy5oYXMoXCJpbnZva2VWYWxpZGF0ZVwiKSA/IGBcbiAgZGVsZXRlKCR7ZGVmaW5lcy5nZXQoXCJhcmdMaXN0XCIpfSkgeyR7aW52b2tlVmFsaWRhdGV9XG4gICAgcmV0dXJuIHN1cGVyLmRlbGV0ZSgke2RlZmluZXMuZ2V0KFwiYXJnTGlzdFwiKX0pO1xuICB9XG5cbiAgZ2V0KCR7ZGVmaW5lcy5nZXQoXCJhcmdMaXN0XCIpfSkgeyR7aW52b2tlVmFsaWRhdGV9XG4gICAgcmV0dXJuIHN1cGVyLmdldCgke2RlZmluZXMuZ2V0KFwiYXJnTGlzdFwiKX0pO1xuICB9XG5cbiAgaGFzKCR7ZGVmaW5lcy5nZXQoXCJhcmdMaXN0XCIpfSkgeyR7aW52b2tlVmFsaWRhdGV9XG4gICAgcmV0dXJuIHN1cGVyLmhhcygke2RlZmluZXMuZ2V0KFwiYXJnTGlzdFwiKX0pO1xuICB9XG5gIDogYGB9XG5cbiR7ZGVmaW5lcy5oYXMoXCJ2YWxpZGF0ZUFyZ3VtZW50c1wiKSA/IGBcbiR7ZG9jcy5idWlsZEJsb2NrKFwiaXNWYWxpZEtleVB1YmxpY1wiLCAyKX1cbiAgaXNWYWxpZEtleSgke2RlZmluZXMuZ2V0KFwiYXJnTGlzdFwiKX0pIHtcbiAgICByZXR1cm4gdGhpcy4jaXNWYWxpZEtleSgke2RlZmluZXMuZ2V0KFwiYXJnTGlzdFwiKX0pO1xuICB9XG5cbiR7XG4gIGRlZmluZXMuaGFzKFwidmFsaWRhdGVWYWx1ZVwiKSA/IGBcbiR7ZG9jcy5idWlsZEJsb2NrKFwiaXNWYWxpZFZhbHVlUHVibGljXCIsIDIpfVxuICBpc1ZhbGlkVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy4jaXNWYWxpZFZhbHVlKHZhbHVlKTtcbiAgfVxuICBgIDogYGBcbiAgfVxuXG5gIDogYGB9XG5cbiR7ZGVmaW5lcy5oYXMoXCJpbnZva2VWYWxpZGF0ZVwiKSA/IGBcbiR7ZG9jcy5idWlsZEJsb2NrKFwic2V0XCIsIDIpfVxuICBzZXQoJHtkZWZpbmVzLmdldChcImFyZ0xpc3RcIil9LCB2YWx1ZSkgeyR7aW52b2tlVmFsaWRhdGV9XG4gICR7XG4gICAgZGVmaW5lcy5oYXMoXCJ2YWxpZGF0ZVZhbHVlXCIpID8gYFxuICAgIGlmICghdGhpcy4jaXNWYWxpZFZhbHVlKHZhbHVlKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSB2YWx1ZSBpcyBub3QgdmFsaWQhXCIpO1xuICBgIDogYGBcbiAgfVxuICAgIHJldHVybiBzdXBlci5zZXQoJHtkZWZpbmVzLmdldChcImFyZ0xpc3RcIil9LCB2YWx1ZSk7XG4gIH1cbmAgOiBgYH1cblxuJHtkZWZpbmVzLmhhcyhcInZhbGlkYXRlQXJndW1lbnRzXCIpID8gYFxuJHtkb2NzLmJ1aWxkQmxvY2soXCJyZXF1aXJlVmFsaWRLZXlcIiwgMil9XG4gICNyZXF1aXJlVmFsaWRLZXkoJHtkZWZpbmVzLmdldChcImFyZ0xpc3RcIil9KSB7XG4gICAgaWYgKCF0aGlzLiNpc1ZhbGlkS2V5KCR7ZGVmaW5lcy5nZXQoXCJhcmdMaXN0XCIpfSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgb3JkZXJlZCBrZXkgc2V0IGlzIG5vdCB2YWxpZCFcIik7XG4gIH1cblxuJHtkb2NzLmJ1aWxkQmxvY2soXCJpc1ZhbGlkS2V5UHJpdmF0ZVwiLCAyKX1cbiAgI2lzVmFsaWRLZXkoJHtkZWZpbmVzLmdldChcImFyZ0xpc3RcIil9KSB7XG4ke2RlZmluZXMuZ2V0KFwidmFsaWRhdGVBcmd1bWVudHNcIil9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbmAgOiBgYH1cbiR7ZGVmaW5lcy5oYXMoXCJ2YWxpZGF0ZVZhbHVlXCIpID8gYFxuJHtkb2NzLmJ1aWxkQmxvY2soXCJpc1ZhbGlkVmFsdWVQcml2YXRlXCIsIDIpfVxuICAjaXNWYWxpZFZhbHVlKHZhbHVlKSB7XG4gICAgJHtkZWZpbmVzLmdldChcInZhbGlkYXRlVmFsdWVcIil9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYCA6IGBgfVxuXG4gIFtTeW1ib2wudG9TdHJpbmdUYWddID0gXCIke2RlZmluZXMuZ2V0KFwiY2xhc3NOYW1lXCIpfVwiO1xufVxuXG5PYmplY3QuZnJlZXplKCR7ZGVmaW5lcy5nZXQoXCJjbGFzc05hbWVcIil9KTtcbk9iamVjdC5mcmVlemUoJHtkZWZpbmVzLmdldChcImNsYXNzTmFtZVwiKX0ucHJvdG90eXBlKTtcbmA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHByZXByb2Nlc3M7XG4iXX0=