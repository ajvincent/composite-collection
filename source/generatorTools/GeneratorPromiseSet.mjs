import { BuildPromise, BuildPromiseSet } from "../utilities/BuildPromise.mjs";
import { PromiseAllParallel } from "../utilities/PromiseTypes.mjs";
import url from "url";
import fs from "fs/promises";
import path from "path";
const projectRoot = url.fileURLToPath(new URL("../..", import.meta.url));
void (BuildPromise); // necessary for type checking in eslint on the generated module
export class GeneratorPromiseSet extends BuildPromiseSet {
    #knownTargets = new Set;
    #owner;
    #targetDir;
    #requireKeyHasher = false;
    #requireWeakKeyComposer = false;
    #generatorsTarget;
    #exportKeysTarget;
    constructor(owner, targetDir) {
        super();
        this.#owner = owner;
        this.#knownTargets.add(this.main.target);
        this.#targetDir = targetDir;
        this.#generatorsTarget = this.get("(generators)");
        this.#exportKeysTarget = this.get("(export keys)");
        this.#exportKeysTarget.addTask(() => this.#exportKeyFiles());
    }
    get owner() {
        return this.#owner;
    }
    /**
     * @param {string} targetName The target name.
     * @returns {BuildPromise} The build promise.
     */
    get(targetName) {
        const rv = super.get(targetName);
        this.#knownTargets.add(targetName);
        return rv;
    }
    /**
     * @param {string} targetName The target name.
     * @returns {boolean} True if this is a known target.
     */
    has(targetName) {
        return this.#knownTargets.has(targetName);
    }
    /** @type {BuildPromise} @constant */
    get generatorsTarget() {
        return this.#generatorsTarget;
    }
    requireKeyHasher() {
        if (this.#requireKeyHasher)
            return;
        this.#requireKeyHasher = true;
    }
    requireWeakKeyComposer() {
        if (this.#requireWeakKeyComposer)
            return;
        this.#requireWeakKeyComposer = true;
        this.#requireKeyHasher = true;
    }
    async runMain() {
        this.markReady();
        this.main.addSubtarget("(generators)");
        this.main.addSubtarget("(export keys)");
        await this.main.run();
    }
    async #exportKeyFiles() {
        if (!this.#requireKeyHasher)
            return;
        let fileList = await fs.readdir(path.join(projectRoot, "source/exports/keys"));
        if (!this.#requireWeakKeyComposer) {
            fileList = fileList.filter(f => !f.startsWith("Composite."));
        }
        await fs.mkdir(path.join(this.#targetDir, "keys"), { recursive: true });
        await PromiseAllParallel(fileList, async (leaf) => fs.copyFile(path.join(projectRoot, "source/exports/keys", leaf), path.join(this.#targetDir, "keys", leaf)));
    }
}
// This is here so the TypeScript generator can derive from it.
export class CodeGeneratorBase {
}
export const generatorToPromiseSet = new WeakMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJhdG9yUHJvbWlzZVNldC5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJHZW5lcmF0b3JQcm9taXNlU2V0Lm10cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRW5FLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQztBQUN0QixPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUV6RSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxnRUFBZ0U7QUFFcEYsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGVBQWU7SUFDdEQsYUFBYSxHQUFnQixJQUFJLEdBQUcsQ0FBQztJQUVyQyxNQUFNLENBQVM7SUFDZixVQUFVLENBQVM7SUFFbkIsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQzFCLHVCQUF1QixHQUFHLEtBQUssQ0FBQztJQUVoQyxpQkFBaUIsQ0FBZTtJQUNoQyxpQkFBaUIsQ0FBZTtJQUVoQyxZQUFZLEtBQWEsRUFBRSxTQUFpQjtRQUMxQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENB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ZFByb21pc2VTZXQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL0J1aWxkUHJvbWlzZS5tanNcIjtcbmltcG9ydCB7IFByb21pc2VBbGxQYXJhbGxlbCB9IGZyb20gXCIuLi91dGlsaXRpZXMvUHJvbWlzZVR5cGVzLm1qc1wiO1xuXG5pbXBvcnQgdXJsIGZyb20gXCJ1cmxcIjtcbmltcG9ydCBmcyBmcm9tIFwiZnMvcHJvbWlzZXNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbmNvbnN0IHByb2plY3RSb290ID0gdXJsLmZpbGVVUkxUb1BhdGgobmV3IFVSTChcIi4uLy4uXCIsIGltcG9ydC5tZXRhLnVybCkpO1xuXG52b2lkKEJ1aWxkUHJvbWlzZSk7IC8vIG5lY2Vzc2FyeSBmb3IgdHlwZSBjaGVja2luZyBpbiBlc2xpbnQgb24gdGhlIGdlbmVyYXRlZCBtb2R1bGVcblxuZXhwb3J0IGNsYXNzIEdlbmVyYXRvclByb21pc2VTZXQgZXh0ZW5kcyBCdWlsZFByb21pc2VTZXQge1xuICAja25vd25UYXJnZXRzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQ7XG5cbiAgI293bmVyOiBvYmplY3Q7XG4gICN0YXJnZXREaXI6IHN0cmluZztcblxuICAjcmVxdWlyZUtleUhhc2hlciA9IGZhbHNlO1xuICAjcmVxdWlyZVdlYWtLZXlDb21wb3NlciA9IGZhbHNlO1xuXG4gICNnZW5lcmF0b3JzVGFyZ2V0OiBCdWlsZFByb21pc2U7XG4gICNleHBvcnRLZXlzVGFyZ2V0OiBCdWlsZFByb21pc2U7XG5cbiAgY29uc3RydWN0b3Iob3duZXI6IG9iamVjdCwgdGFyZ2V0RGlyOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI293bmVyID0gb3duZXI7XG4gICAgdGhpcy4ja25vd25UYXJnZXRzLmFkZCh0aGlzLm1haW4udGFyZ2V0KTtcblxuICAgIHRoaXMuI3RhcmdldERpciA9IHRhcmdldERpcjtcblxuICAgIHRoaXMuI2dlbmVyYXRvcnNUYXJnZXQgPSB0aGlzLmdldChcIihnZW5lcmF0b3JzKVwiKTtcbiAgICB0aGlzLiNleHBvcnRLZXlzVGFyZ2V0ID0gdGhpcy5nZXQoXCIoZXhwb3J0IGtleXMpXCIpO1xuXG4gICAgdGhpcy4jZXhwb3J0S2V5c1RhcmdldC5hZGRUYXNrKCgpID0+IHRoaXMuI2V4cG9ydEtleUZpbGVzKCkpO1xuICB9XG5cbiAgZ2V0IG93bmVyKCkgOiBvYmplY3Qge1xuICAgIHJldHVybiB0aGlzLiNvd25lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0TmFtZSBUaGUgdGFyZ2V0IG5hbWUuXG4gICAqIEByZXR1cm5zIHtCdWlsZFByb21pc2V9IFRoZSBidWlsZCBwcm9taXNlLlxuICAgKi9cbiAgZ2V0KHRhcmdldE5hbWU6IHN0cmluZykgOiBCdWlsZFByb21pc2Uge1xuICAgIGNvbnN0IHJ2ID0gc3VwZXIuZ2V0KHRhcmdldE5hbWUpO1xuICAgIHRoaXMuI2tub3duVGFyZ2V0cy5hZGQodGFyZ2V0TmFtZSk7XG4gICAgcmV0dXJuIHJ2O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXROYW1lIFRoZSB0YXJnZXQgbmFtZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBpcyBhIGtub3duIHRhcmdldC5cbiAgICovXG4gIGhhcyh0YXJnZXROYW1lOiBzdHJpbmcpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2tub3duVGFyZ2V0cy5oYXModGFyZ2V0TmFtZSk7XG4gIH1cblxuICAvKiogQHR5cGUge0J1aWxkUHJvbWlzZX0gQGNvbnN0YW50ICovXG4gIGdldCBnZW5lcmF0b3JzVGFyZ2V0KCk6IEJ1aWxkUHJvbWlzZSB7XG4gICAgcmV0dXJuIHRoaXMuI2dlbmVyYXRvcnNUYXJnZXQ7XG4gIH1cblxuICByZXF1aXJlS2V5SGFzaGVyKCkgOiB2b2lkIHtcbiAgICBpZiAodGhpcy4jcmVxdWlyZUtleUhhc2hlcilcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLiNyZXF1aXJlS2V5SGFzaGVyID0gdHJ1ZTtcbiAgfVxuXG4gIHJlcXVpcmVXZWFrS2V5Q29tcG9zZXIoKSA6IHZvaWQge1xuICAgIGlmICh0aGlzLiNyZXF1aXJlV2Vha0tleUNvbXBvc2VyKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuI3JlcXVpcmVXZWFrS2V5Q29tcG9zZXIgPSB0cnVlO1xuICAgIHRoaXMuI3JlcXVpcmVLZXlIYXNoZXIgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgcnVuTWFpbigpIDogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5tYXJrUmVhZHkoKTtcbiAgICB0aGlzLm1haW4uYWRkU3VidGFyZ2V0KFwiKGdlbmVyYXRvcnMpXCIpO1xuICAgIHRoaXMubWFpbi5hZGRTdWJ0YXJnZXQoXCIoZXhwb3J0IGtleXMpXCIpO1xuXG4gICAgYXdhaXQgdGhpcy5tYWluLnJ1bigpO1xuICB9XG5cbiAgYXN5bmMgI2V4cG9ydEtleUZpbGVzKCkgOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuI3JlcXVpcmVLZXlIYXNoZXIpXG4gICAgICByZXR1cm47XG5cbiAgICBsZXQgZmlsZUxpc3QgPSBhd2FpdCBmcy5yZWFkZGlyKHBhdGguam9pbihwcm9qZWN0Um9vdCwgXCJzb3VyY2UvZXhwb3J0cy9rZXlzXCIpKTtcbiAgICBpZiAoIXRoaXMuI3JlcXVpcmVXZWFrS2V5Q29tcG9zZXIpIHtcbiAgICAgIGZpbGVMaXN0ID0gZmlsZUxpc3QuZmlsdGVyKGYgPT4gIWYuc3RhcnRzV2l0aChcIkNvbXBvc2l0ZS5cIikpO1xuICAgIH1cblxuICAgIGF3YWl0IGZzLm1rZGlyKHBhdGguam9pbih0aGlzLiN0YXJnZXREaXIsIFwia2V5c1wiKSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG5cbiAgICBhd2FpdCBQcm9taXNlQWxsUGFyYWxsZWwoZmlsZUxpc3QsIGFzeW5jIChsZWFmKSA9PiBmcy5jb3B5RmlsZShcbiAgICAgIHBhdGguam9pbihwcm9qZWN0Um9vdCwgXCJzb3VyY2UvZXhwb3J0cy9rZXlzXCIsIGxlYWYpLFxuICAgICAgcGF0aC5qb2luKHRoaXMuI3RhcmdldERpciwgXCJrZXlzXCIsIGxlYWYpXG4gICAgKSk7XG4gIH1cbn1cblxuLy8gVGhpcyBpcyBoZXJlIHNvIHRoZSBUeXBlU2NyaXB0IGdlbmVyYXRvciBjYW4gZGVyaXZlIGZyb20gaXQuXG5leHBvcnQgY2xhc3MgQ29kZUdlbmVyYXRvckJhc2Uge31cblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRvclRvUHJvbWlzZVNldDogV2Vha01hcDxDb2RlR2VuZXJhdG9yQmFzZSwgR2VuZXJhdG9yUHJvbWlzZVNldD4gPSBuZXcgV2Vha01hcDtcbiJdfQ==