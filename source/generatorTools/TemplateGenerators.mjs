import { PromiseAllParallel } from "../utilities/PromiseTypes.mjs";
/**
 * @type {Map<string, Function>}
 * @package
 */
const TemplateGenerators = new Map();
import readDirsDeep from "../utilities/readDirsDeep.mjs";
const templateDirURL = new URL("../../templates", import.meta.url);
const templateDir = templateDirURL.pathname;
const allFiles = (await readDirsDeep(templateDir)).files;
await PromiseAllParallel(allFiles, async (fullPath) => {
    let baseName = fullPath.substring(templateDir.length + 1);
    if (!baseName.endsWith(".in.mjs"))
        return;
    const generator = (await import(fullPath)).default;
    if (typeof generator === "function")
        TemplateGenerators.set(baseName.replace(/\.in\.mjs$/, ""), generator);
    else
        throw new Error("generator isn't a function?");
});
export default TemplateGenerators;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVHZW5lcmF0b3JzLm1qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRlbXBsYXRlR2VuZXJhdG9ycy5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFNbkU7OztHQUdHO0FBQ0gsTUFBTSxrQkFBa0IsR0FBa0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVwRSxPQUFPLFlBQVksTUFBTSwrQkFBK0IsQ0FBQztBQUV6RCxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7QUFFNUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUV6RCxNQUFNLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO0lBQzVELElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDL0IsT0FBTztJQUVULE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDbkQsSUFBSSxPQUFPLFNBQVMsS0FBSyxVQUFVO1FBQ2pDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQzs7UUFFdEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ25ELENBQUMsQ0FBQyxDQUFDO0FBRUgsZUFBZSxrQkFBa0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb21pc2VBbGxQYXJhbGxlbCB9IGZyb20gXCIuLi91dGlsaXRpZXMvUHJvbWlzZVR5cGVzLm1qc1wiO1xuXG5pbXBvcnQgSlNEb2NHZW5lcmF0b3IgZnJvbSBcIi4vSlNEb2NHZW5lcmF0b3IubWpzXCI7XG5pbXBvcnQgeyBSZWFkb25seURlZmluZXMgfSBmcm9tIFwiLi9QcmVwcm9jZXNzb3JEZWZpbmVzLm1qc1wiO1xuZXhwb3J0IHR5cGUgVGVtcGxhdGVGdW5jdGlvbiA9IChkZWZpbmVzOiBSZWFkb25seURlZmluZXMsIC4uLmRvY0dlbmVyYXRvcnM6IEpTRG9jR2VuZXJhdG9yW10pID0+IHN0cmluZztcblxuLyoqXG4gKiBAdHlwZSB7TWFwPHN0cmluZywgRnVuY3Rpb24+fVxuICogQHBhY2thZ2VcbiAqL1xuY29uc3QgVGVtcGxhdGVHZW5lcmF0b3JzOiBNYXA8c3RyaW5nLCBUZW1wbGF0ZUZ1bmN0aW9uPiA9IG5ldyBNYXAoKTtcblxuaW1wb3J0IHJlYWREaXJzRGVlcCBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlYWREaXJzRGVlcC5tanNcIjtcblxuY29uc3QgdGVtcGxhdGVEaXJVUkwgPSBuZXcgVVJMKFwiLi4vLi4vdGVtcGxhdGVzXCIsIGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCB0ZW1wbGF0ZURpciA9IHRlbXBsYXRlRGlyVVJMLnBhdGhuYW1lO1xuXG5jb25zdCBhbGxGaWxlcyA9IChhd2FpdCByZWFkRGlyc0RlZXAodGVtcGxhdGVEaXIpKS5maWxlcztcblxuYXdhaXQgUHJvbWlzZUFsbFBhcmFsbGVsKGFsbEZpbGVzLCBhc3luYyAoZnVsbFBhdGg6IHN0cmluZykgPT4ge1xuICBsZXQgYmFzZU5hbWUgPSBmdWxsUGF0aC5zdWJzdHJpbmcodGVtcGxhdGVEaXIubGVuZ3RoICsgMSk7XG4gIGlmICghYmFzZU5hbWUuZW5kc1dpdGgoXCIuaW4ubWpzXCIpKVxuICAgIHJldHVybjtcblxuICBjb25zdCBnZW5lcmF0b3IgPSAoYXdhaXQgaW1wb3J0KGZ1bGxQYXRoKSkuZGVmYXVsdDtcbiAgaWYgKHR5cGVvZiBnZW5lcmF0b3IgPT09IFwiZnVuY3Rpb25cIilcbiAgICBUZW1wbGF0ZUdlbmVyYXRvcnMuc2V0KGJhc2VOYW1lLnJlcGxhY2UoL1xcLmluXFwubWpzJC8sIFwiXCIpLCBnZW5lcmF0b3IpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZ2VuZXJhdG9yIGlzbid0IGEgZnVuY3Rpb24/XCIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFRlbXBsYXRlR2VuZXJhdG9ycztcbiJdfQ==